/* 
 *  Copyright (c) 2020 Xuhpclab. All rights reserved.
 *  Licensed under the MIT License.
 *  See LICENSE file for more information.
 */

#include <cstddef>

#include <map>
#include <set>
#include "dr_api.h"
#include "drmgr.h"
#include "drreg.h"
#include "drutil.h"
#include "drcctlib.h"
#include "drwrap.h"
#include "shadow_memory.h"
#include <utility>
#include <vector>
#include <algorithm>
#define FUNC_FOOTPRINT
//#define INSTR_FOOTPRINT
#define DRCCTLIB_PRINTF(format, args...) \
    DRCCTLIB_PRINTF_TEMPLATE("drcctlib_heap_overflow", format, ##args)
#define DRCCTLIB_EXIT_PROCESS(format, args...)                                           \
    DRCCTLIB_CLIENT_EXIT_PROCESS_TEMPLATE("drcctlib_heap_overflow.cpp", format, \
                                          ##args)
#define THREAD_ROOT_SHARDED_CALLER_CONTEXT_HANDLE 1
#define MAX_CLIENT_CCT_PRINT_DEPTH 10
int tls_idx;
static file_t gTraceFile;
enum {
    INSTRACE_TLS_OFFS_BUF_PTR,
    INSTRACE_TLS_COUNT, /* total number of TLS slots allocated */
};
static reg_id_t tls_seg;
static uint tls_offs;
#define TLS_SLOT(tls_base, enum_val) (void **)((byte *)(tls_base) + tls_offs + (enum_val))
#define BUF_PTR(tls_base, type, offs) *(type **)TLS_SLOT(tls_base, offs)
#define MINSERT instrlist_meta_preinsert
#ifdef ARM_CCTLIB
#    define OPND_CREATE_CCT_INT OPND_CREATE_INT
#else
#    define OPND_CREATE_CCT_INT OPND_CREATE_INT32
#endif

#ifdef WINDOWS
#    define IF_WINDOWS_ELSE(x, y) x
#else
#    define IF_WINDOWS_ELSE(x, y) y
#endif
#define MALLOC_ROUTINE_NAME IF_WINDOWS_ELSE("HeapAlloc", "malloc")
static size_t max_malloc;
static void *max_lock;
typedef struct _mem_ref_t {
    app_pc addr;
    size_t size;
    int32_t read_write;
} mem_ref_t;

typedef struct _per_thread_t {
    mem_ref_t *cur_buf_list;
    void *cur_buf;
} per_thread_t;
//structure to record context handle and rw
typedef struct _record {
    bool rw;
    context_handle_t ctxt_hndl;
} record;

TlsShadowMemory<record> *last_state;
std::map<reg_id_t,record> last_acc_reg;
#define TLS_MEM_REF_BUFF_SIZE 100

std::map<int64_t,int64_t> record_freq_mem;
std::map<int64_t,int64_t> record_freq_reg;
// client want to do
void
DetectDeadMem(void *drcontext, context_handle_t cur_ctxt_hndl, mem_ref_t *ref,bool rw)
{
    // add online analysis here
    int32_t dead_ctxt,killing_ctxt;
    int64_t temp;
    record *state=last_state->GetShadowAddress((size_t)ref->addr);
    if(!state)
        state=last_state->GetOrCreateShadowAddress((size_t)ref->addr);
    else
    {
        if(state->rw==true && rw==true)
        {
           temp=((((int64_t)state->ctxt_hndl)<<32) | (((int64_t)cur_ctxt_hndl)<<32)>>32);
           if(record_freq_mem.find(temp)==record_freq_mem.end())
               record_freq_mem.insert({temp,1});
           else
                record_freq_mem[temp]++;
        }
    }
    state->rw=rw;
    state->ctxt_hndl=cur_ctxt_hndl;

}
// dr clean call Memory
void
InsertCleancallMem(int32_t slot,int32_t num_read,int32_t num_write)
{
    void *drcontext = dr_get_current_drcontext();
    per_thread_t *pt = (per_thread_t *)drmgr_get_tls_field(drcontext, tls_idx);
    context_handle_t cur_ctxt_hndl = drcctlib_get_context_handle(drcontext, slot);
    for (int i = 0; i < num_read; i++) {
        if (pt->cur_buf_list[i].addr != 0) {
            DetectDeadMem(drcontext, cur_ctxt_hndl, &pt->cur_buf_list[i],false);
        }
    }

    for (int i = num_read; i < num_read+num_write; i++) {
        if (pt->cur_buf_list[i].addr != 0) {
            DetectDeadMem(drcontext, cur_ctxt_hndl, &pt->cur_buf_list[i],true);
        }
    }
    
    BUF_PTR(pt->cur_buf, mem_ref_t, INSTRACE_TLS_OFFS_BUF_PTR) = pt->cur_buf_list;
    
}
//clean call Register
void
InsertCleancallReg(int32_t slot, reg_id_t reg_id, int32_t re_w)
{
    bool rw;
    if(re_w==1)
        rw=true;
    else
        rw=false;
    
    void *drcontext = dr_get_current_drcontext();
    per_thread_t *pt = (per_thread_t *)drmgr_get_tls_field(drcontext, tls_idx);
    context_handle_t cur_ctxt_hndl = drcctlib_get_context_handle(drcontext, slot);
    
    int64_t temp;
    int32_t dead_ctxt,killing_ctxt;
    record rec;
    rec.rw=rw;
    rec.ctxt_hndl=cur_ctxt_hndl;
    if(last_acc_reg.find(reg_id)==last_acc_reg.end())
        last_acc_reg.insert({reg_id,rec});
    else
    {
        if(last_acc_reg[reg_id].rw==true && rw==true)
        {
            temp=((((int64_t)last_acc_reg[reg_id].ctxt_hndl)<<32) | (((int64_t)cur_ctxt_hndl)<<32)>>32);
            if(record_freq_reg.find(temp)==record_freq_reg.end())
                record_freq_reg.insert({temp,1});
            else
                record_freq_reg[temp]++;

        }
         
        last_acc_reg[reg_id].rw=rw;
        last_acc_reg[reg_id].ctxt_hndl=cur_ctxt_hndl;
        
     }
}

// insert
static void
InstrumentMem(void *drcontext, instrlist_t *ilist, instr_t *where, opnd_t ref)
{
    /* We need two scratch registers */
    reg_id_t reg_mem_ref_ptr, free_reg;
    if (drreg_reserve_register(drcontext, ilist, where, NULL, &reg_mem_ref_ptr) !=
            DRREG_SUCCESS ||
        drreg_reserve_register(drcontext, ilist, where, NULL, &free_reg) !=
            DRREG_SUCCESS) {
        DRCCTLIB_EXIT_PROCESS("InstrumentMem drreg_reserve_register != DRREG_SUCCESS");
    }
    if (!drutil_insert_get_mem_addr(drcontext, ilist, where, ref, free_reg,
                                    reg_mem_ref_ptr)) {
        MINSERT(ilist, where,
                XINST_CREATE_load_int(drcontext, opnd_create_reg(free_reg),
                                      OPND_CREATE_CCT_INT(0)));
    }
    dr_insert_read_raw_tls(drcontext, ilist, where, tls_seg,
                           tls_offs + INSTRACE_TLS_OFFS_BUF_PTR, reg_mem_ref_ptr);
    // store mem_ref_t->addr
    MINSERT(ilist, where,
            XINST_CREATE_store(
                drcontext, OPND_CREATE_MEMPTR(reg_mem_ref_ptr, offsetof(mem_ref_t, addr)),
                opnd_create_reg(free_reg)));

    // store mem_ref_t->size
#ifdef ARM_CCTLIB
    MINSERT(ilist, where,
            XINST_CREATE_load_int(drcontext, opnd_create_reg(free_reg),
                                  OPND_CREATE_CCT_INT(drutil_opnd_mem_size_in_bytes(ref, where))));
    MINSERT(ilist, where,
            XINST_CREATE_store(drcontext, OPND_CREATE_MEMPTR(reg_mem_ref_ptr, offsetof(mem_ref_t, size)),
                             opnd_create_reg(free_reg)));
#else
    MINSERT(ilist, where,
            XINST_CREATE_store(drcontext, OPND_CREATE_MEMPTR(reg_mem_ref_ptr, offsetof(mem_ref_t, size)),
                             OPND_CREATE_CCT_INT(drutil_opnd_mem_size_in_bytes(ref, where))));
#endif
#ifdef ARM_CCTLIB
    MINSERT(ilist, where,
            XINST_CREATE_load_int(drcontext, opnd_create_reg(free_reg),
                                  OPND_CREATE_CCT_INT(sizeof(mem_ref_t))));
    MINSERT(ilist, where,
            XINST_CREATE_add(drcontext, opnd_create_reg(reg_mem_ref_ptr),
                             opnd_create_reg(free_reg)));
#else
    MINSERT(ilist, where,
            XINST_CREATE_add(drcontext, opnd_create_reg(reg_mem_ref_ptr),
                             OPND_CREATE_CCT_INT(sizeof(mem_ref_t))));
#endif
    dr_insert_write_raw_tls(drcontext, ilist, where, tls_seg,
                            tls_offs + INSTRACE_TLS_OFFS_BUF_PTR, reg_mem_ref_ptr);
    /* Restore scratch registers */
    if (drreg_unreserve_register(drcontext, ilist, where, reg_mem_ref_ptr) !=
            DRREG_SUCCESS ||
        drreg_unreserve_register(drcontext, ilist, where, free_reg) != DRREG_SUCCESS) {
        DRCCTLIB_EXIT_PROCESS("InstrumentMem drreg_unreserve_register != DRREG_SUCCESS");
    }
}

// analysis
void 
InstrumentInsCallback(void *drcontext, instr_instrument_msg_t *instrument_msg)
{

    instrlist_t *bb = instrument_msg->bb;
    instr_t *instr = instrument_msg->instr;
    int32_t slot = instrument_msg->slot;
    int32_t num_read = 0;
    int32_t num_write = 0;
    //get src operand memory ref
    for (int i = 0; i < instr_num_srcs(instr); i++) {
        opnd_t op=instr_get_src(instr, i);
        if (opnd_is_memory_reference(op)) {
            num_read++;
            InstrumentMem(drcontext, bb, instr, instr_get_src(instr, i));
        }

        int num_temp = opnd_num_regs_used(op);
        for(int j=0;j<num_temp;j++)
        {
            auto reg=opnd_get_reg_used(op,j);
            dr_insert_clean_call(drcontext, bb, instr,
                                 (void *)InsertCleancallReg,false, 3,
                                 OPND_CREATE_CCT_INT(slot), 
                                 OPND_CREATE_CCT_INT(reg) ,
                                 OPND_CREATE_CCT_INT(0));
         } 
    }
    for (int i = 0; i < instr_num_dsts(instr); i++) {
        opnd_t op=instr_get_dst(instr, i);

        if (opnd_is_reg(op))
        {
            
            auto reg= opnd_get_reg(op);
            dr_insert_clean_call(drcontext, bb, instr,
                                 (void *)InsertCleancallReg,false, 3,
                                 OPND_CREATE_CCT_INT(slot), 
                                 OPND_CREATE_CCT_INT(reg) , 
                                 OPND_CREATE_CCT_INT(1));
        }
        else if (opnd_is_memory_reference(op)) {
            num_write++;
            InstrumentMem(drcontext, bb, instr, instr_get_dst(instr, i));

            int num_temp = opnd_num_regs_used(op);
            for(int j=0;j<num_temp;j++)
            {
                auto reg=opnd_get_reg_used(op,j);
                dr_insert_clean_call(drcontext, bb, instr,
                                     (void *)InsertCleancallReg,false, 3,
                                     OPND_CREATE_CCT_INT(slot), 
                                     OPND_CREATE_CCT_INT(reg) , 
                                     OPND_CREATE_CCT_INT(0));
            }
        }
    }
    dr_insert_clean_call(drcontext, bb, instr, (void *)InsertCleancallMem, false, 3,
                         OPND_CREATE_CCT_INT(slot), 
                         OPND_CREATE_CCT_INT(num_read),
                         OPND_CREATE_CCT_INT(num_write));
}

static void
ClientThreadStart(void *drcontext)
{
    per_thread_t *pt = (per_thread_t *)dr_thread_alloc(drcontext, sizeof(per_thread_t));
    if (pt == NULL) {
        DRCCTLIB_EXIT_PROCESS("pt == NULL");
    }
    drmgr_set_tls_field(drcontext, tls_idx, (void *)pt);

    pt->cur_buf = dr_get_dr_segment_base(tls_seg);
    pt->cur_buf_list =
        (mem_ref_t *)dr_global_alloc(TLS_MEM_REF_BUFF_SIZE * sizeof(mem_ref_t));
    BUF_PTR(pt->cur_buf, mem_ref_t, INSTRACE_TLS_OFFS_BUF_PTR) = pt->cur_buf_list;
}

static void
ClientThreadEnd(void *drcontext)
{
    per_thread_t *pt = (per_thread_t *)drmgr_get_tls_field(drcontext, tls_idx);
    dr_global_free(pt->cur_buf_list, TLS_MEM_REF_BUFF_SIZE * sizeof(mem_ref_t));
    dr_thread_free(drcontext, pt, sizeof(per_thread_t));
}

static void
ClientInit(int argc, const char *argv[])
{
    #ifdef ARM_CCTLIB
    char name[MAXIMUM_PATH] = "arm.drcctlib_heap_overflow.out.";
#else
    char name[MAXIMUM_PATH] = "x86.drcctlib_heap_overflow.out.";
#endif

    last_state = new TlsShadowMemory<record>();
    gethostname(name + strlen(name), MAXIMUM_PATH - strlen(name));
    pid_t pid = getpid();
    sprintf(name + strlen(name), "%d", pid);
    DRCCTLIB_PRINTF("Creating log file at:%s", name);
    gTraceFile = dr_open_file(name, DR_FILE_WRITE_OVERWRITE | DR_FILE_ALLOW_LARGE);
    DR_ASSERT(gTraceFile != INVALID_FILE);
    // print the arguments passed
    dr_fprintf(gTraceFile, "\n");
    for (int i = 0; i < argc; i++) {
        dr_fprintf(gTraceFile, "%d %s ", i, argv[i]);
    }
    dr_fprintf(gTraceFile, "\n");
    dr_fprintf(gTraceFile, " ===========init========\n");
}
/*
bool cmp(std::pair<int64_t, int64_t>& a, 
                 std::pair<int64_t, int64_t>& b) 
{ 
        return a.second > b.second; 
} 
*/
static void
ClientExit(void)
{

/*    std::map<int64_t,int64_t>::iterator it;
    std::vector<std::pair<int64_t,int64_t>>::iterator it2;
    int i=0,i1=0;
    std::vector<std::pair<int64_t,int64_t>> sort_vec;
    std::vector<std::pair<int64_t,int64_t>> sort_vec_reg;

    for(it=record_freq_mem.begin();it!=record_freq_mem.end();it++)
    {
        sort_vec.push_back({it->first,it->second});
    }

    dr_fprintf(gTraceFile, "======Printing stats Memory==================\n");
    std::sort(sort_vec.begin(),sort_vec.end(),cmp);
    int cnt=0;
    for(it2=sort_vec.begin();it2!=sort_vec.end();it2++)
    {   

        int64_t dead_store=it2->first >> 32;
        int64_t dead_kill = (it2->first <<32) >>32;
        if(cnt<=100)
        {
            dr_fprintf(gTraceFile, "%ld dead store context,"
                    "%ld dead kill context ,%ld total freq\n",
                        dead_store,dead_kill,it2->second);
            dr_fprintf(gTraceFile, "dead store context tree \n");
            dr_fprintf(gTraceFile,"==================\n");
            cnt++;    
     	    drcctlib_print_ctxt_hndl_msg(gTraceFile, 
                                        (context_handle_t)dead_store, 
                                        false, false);
            drcctlib_print_full_cct(gTraceFile, (context_handle_t)dead_store, true, false,
                        MAX_CLIENT_CCT_PRINT_DEPTH);

                
            dr_fprintf(gTraceFile, "dead kill context tree \n");
            dr_fprintf(gTraceFile,"==================\n");
     	    drcctlib_print_ctxt_hndl_msg(gTraceFile, (context_handle_t)dead_kill, false, false);
            drcctlib_print_full_cct(gTraceFile, (context_handle_t)dead_kill, true, false,
                        MAX_CLIENT_CCT_PRINT_DEPTH);

        }
        else
            break;
          
        dr_fprintf(gTraceFile,"==================\n\n");
    }

    for(it=record_freq_reg.begin();it!=record_freq_reg.end();it++)
    {
        sort_vec_reg.push_back({it->first,it->second});
    }
    dr_fprintf(gTraceFile, "======Printing stats Register==================\n");
    std::sort(sort_vec_reg.begin(),sort_vec_reg.end(),cmp);
    cnt=0;
    for(it2=sort_vec_reg.begin();it2!=sort_vec_reg.end();it2++)
    {   

        int64_t dead_store=it2->first >> 32;
        int64_t dead_kill = (it2->first <<32) >>32;
        if(cnt<=100)
        {
            dr_fprintf(gTraceFile, "%ld dead store, %ld dead kill ,%ld freq\n",
                        dead_store,dead_kill,it2->second);
            cnt++;
                
     	        drcctlib_print_ctxt_hndl_msg(gTraceFile, (context_handle_t)dead_store, false, false);
                drcctlib_print_full_cct(gTraceFile, (context_handle_t)dead_store, true, false,
                        MAX_CLIENT_CCT_PRINT_DEPTH);

        }
        else
            break;
        dr_fprintf(gTraceFile,"==================\n");
    }
    delete(last_state);*/
    drcctlib_exit();

    if (!dr_raw_tls_cfree(tls_offs, INSTRACE_TLS_COUNT)) {
        DRCCTLIB_EXIT_PROCESS(
            "ERROR: drcctlib_heap_overflow dr_raw_tls_calloc fail");
    }
    if (!drmgr_unregister_thread_init_event(ClientThreadStart) ||
        !drmgr_unregister_thread_exit_event(ClientThreadEnd) ||
        !drmgr_unregister_tls_field(tls_idx)) {
        DRCCTLIB_PRINTF("ERROR: drcctlib_heap_overflow failed to "
                        "unregister in ClientExit");
    }
    dr_mutex_destroy(max_lock);
    drwrap_exit();
    drmgr_exit();
    if (drreg_exit() != DRREG_SUCCESS) {
        DRCCTLIB_PRINTF("failed to exit drreg");
    }
    drutil_exit();
}

static void
wrap_pre(void *wrapcxt, OUT void **user_data)
{
    /* malloc(size) or HeapAlloc(heap, flags, size) */
    size_t sz = (size_t)drwrap_get_arg(wrapcxt, IF_WINDOWS_ELSE(2, 0));
    /* increment the allocation size by 1, as red zone */
    bool set_arg=drwrap_set_arg(wrapcxt,sz,(void *)(sz+1));

    dr_fprintf(gTraceFile,"Testing pre!!!!!!!!!!\n\n");
    /* find the maximum malloc request */
    if (sz > max_malloc) {
        dr_mutex_lock(max_lock);
        if (sz > max_malloc)
            max_malloc = sz;
        dr_mutex_unlock(max_lock);
    }
    *user_data = (void *)sz;
}

static void
wrap_post(void *wrapcxt, void *user_data)
{
#ifdef SHOW_RESULTS /* we want determinism in our test suite */
    size_t sz = (size_t)user_data;
    dr_fprintf(gTraceFile,"Address start= %p\n\n",user_data);
    DRCCTLIB_PRINTF("Creating log file at:%p", user_data);
    /* test out-of-memory by having a random moderately-large alloc fail */
    if (sz > 1024 && dr_get_random_value(1000) < 10) {
        bool ok = drwrap_set_retval(wrapcxt, NULL);
        DR_ASSERT(ok);
        dr_mutex_lock(max_lock);
        malloc_oom++;
        dr_mutex_unlock(max_lock);
    }
#endif
}

static void 
module_load_event(void *drcontext, const module_data_t *mod, bool loaded)
{
    app_pc towrap = (app_pc)dr_get_proc_address(mod->handle, MALLOC_ROUTINE_NAME);
	if (towrap != NULL) {
#ifdef SHOW_RESULTS
        bool ok =
#endif
            drwrap_wrap(towrap, wrap_pre, wrap_post);
#ifdef SHOW_RESULTS
        if (ok) {
            dr_fprintf(STDERR, "<wrapped " MALLOC_ROUTINE_NAME " @" PFX "\n", towrap);
        } else {
            /* We expect this w/ forwarded exports (e.g., on win7 both
             * kernel32!HeapAlloc and kernelbase!HeapAlloc forward to
             * the same routine in ntdll.dll)
             */
            dr_fprintf(STDERR,
                       "<FAILED to wrap " MALLOC_ROUTINE_NAME " @" PFX
                       ": already wrapped?\n",
                       towrap);
        }
#endif
    }
}

#ifdef __cplusplus
extern "C" {
#endif

DR_EXPORT void
dr_client_main(client_id_t id, int argc, const char *argv[])
{
    dr_set_client_name("DynamoRIO Client 'drcctlib_heap_overflow'",
                       "http://dynamorio.org/issues");
    ClientInit(argc, argv);

    if (!drmgr_init()) {
        DRCCTLIB_EXIT_PROCESS("ERROR: drcctlib_heap_overflow "
                              "unable to initialize drmgr");
    }
    drreg_options_t ops = { sizeof(ops), 4 /*max slots needed*/, false };
    if (drreg_init(&ops) != DRREG_SUCCESS) {
        DRCCTLIB_EXIT_PROCESS("ERROR: drcctlib_heap_overflow "
                              "unable to initialize drreg");
    }
    if (!drutil_init()) {
        DRCCTLIB_EXIT_PROCESS("ERROR: drcctlib_heap_overflow "
                              "unable to initialize drutil");
    }
    drmgr_register_thread_init_event(ClientThreadStart);
    drmgr_register_thread_exit_event(ClientThreadEnd);

    tls_idx = drmgr_register_tls_field();
    if (tls_idx == -1) {
        DRCCTLIB_EXIT_PROCESS("ERROR: drcctlib_heap_overflow "
                              "drmgr_register_tls_field fail");
    }
    if (!dr_raw_tls_calloc(&tls_seg, &tls_offs, INSTRACE_TLS_COUNT, 0)) {
        DRCCTLIB_EXIT_PROCESS(
            "ERROR: drcctlib_heap_overflow dr_raw_tls_calloc fail");
    }
    drcctlib_init(DRCCTLIB_FILTER_MEM_ACCESS_INSTR, INVALID_FILE, InstrumentInsCallback, false);
    drwrap_init();
    dr_register_exit_event(ClientExit);
    drmgr_register_module_load_event(module_load_event);

    dr_fprintf(gTraceFile,"Testing main!!!!!!!!!!\n\n");
    max_lock = dr_mutex_create();

}

#ifdef __cplusplus
}
#endif
